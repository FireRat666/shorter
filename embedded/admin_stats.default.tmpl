<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="color-scheme" content="dark">
    <link rel="stylesheet" type="text/css" href="/shorter.css" integrity="{{.CssSRIHash}}">
    <title>Site Statistics</title>
</head>
<body>
    <div class="content">
        <div class="header">
            <h1>Site Statistics</h1>
            <a href="/admin" class="admin-back-link">Back to Admin Panel</a>
        </div>

        <div class="tos">
            <h2>Overall Statistics</h2>
            <div id="overall-stats-container">
                <button id="load-overall-stats" class="button">Load Overall Statistics</button>
            </div>
        </div>

        <div class="tos">
            <h2>Recent Activity</h2>
            <div id="recent-activity-container">
                <button id="load-recent-activity" class="button">Load Recent Activity</button>
            </div>
        </div>

        <div class="tos">
            <h2>Top Links by Clicks</h2>
            <div id="top-links-container">
                <button id="load-top-links" class="button">Load Top Links</button>
            </div>
        </div>

        <div class="tos">
            <h2>Links by Creator</h2>
            <div id="creator-stats-container">
                <button id="load-creator-stats" class="button">Load Creator Stats</button>
            </div>
        </div>

        <div class="tos">
            <h2>Statistics by Domain</h2>
            <div id="domain-stats-container">
                <button id="load-domain-stats" class="button">Load Domain Statistics</button>
            </div>
        </div>

        <div class="tos">
            <input id="reset-stats-toggle" class="toggle-checkbox" type="checkbox" />
            <label for="reset-stats-toggle" class="toggle-label">Reset Statistics</label>
            <div class="toggle-content">
                <p class="info"><strong>Warning:</strong> This will permanently delete all historical click and expiration data, and reset click counts on all active links to zero. This action cannot be undone.</p>
                <form method="POST" action="/admin/stats/reset">
                    <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
                    <input type="submit" value="Reset All Statistics" class="delete-button" data-confirm="Are you sure you want to reset all statistics? This is irreversible.">
                </form>
            </div>
        </div>
    </div>

    <script nonce="{{.Nonce}}">
        function loadStatSection(buttonId, containerId, endpoint) {
            const button = document.getElementById(buttonId);
            const container = document.getElementById(containerId);

            button.addEventListener('click', () => {
                button.disabled = true;
                button.textContent = 'Loading...';

                fetch(endpoint)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.text();
                    })
                    .then(html => {
                        container.innerHTML = html;
                    })
                    .catch(error => {
                        console.error('Error loading stats:', error);
                        container.innerHTML = `<p class="error">Failed to load data. Please check the console for details.</p>`;
                    });
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadStatSection(
                'load-overall-stats',
                'overall-stats-container',
                '/admin/stats/overall'
            );
            loadStatSection(
                'load-recent-activity',
                'recent-activity-container',
                '/admin/stats/recent-activity'
            );
            loadStatSection(
                'load-creator-stats',
                'creator-stats-container',
                '/admin/stats/creator-stats'
            );

            // Custom logic for the two-step domain stats section
            const loadDomainStatsBtn = document.getElementById('load-domain-stats');
            const domainStatsContainer = document.getElementById('domain-stats-container');

            loadDomainStatsBtn.addEventListener('click', () => {
                loadDomainStatsBtn.disabled = true;
                loadDomainStatsBtn.textContent = 'Loading...';

                fetch('/admin/stats/domain-list')
                    .then(response => {
                        if (!response.ok) throw new Error('Failed to load domain list.');
                        return response.text();
                    })
                    .then(html => {
                        domainStatsContainer.innerHTML = html;
                        // Now that the new content is in the DOM, add event listener for it.
                        const viewBtn = domainStatsContainer.querySelector('#view-domain-stats-btn');
                        const selector = domainStatsContainer.querySelector('#domain-select');
                        const resultsDiv = domainStatsContainer.querySelector('#domain-stats-result');

                        viewBtn.addEventListener('click', () => {
                            const selectedDomain = selector.value;
                            if (!selectedDomain) return;

                            resultsDiv.innerHTML = '<p>Loading...</p>';

                            fetch(`/admin/stats/domain-details?domain=${encodeURIComponent(selectedDomain)}`)
                                .then(response => response.ok ? response.text() : Promise.reject('Failed to load domain details.'))
                                .then(detailsHtml => { resultsDiv.innerHTML = detailsHtml; })
                                .catch(error => {
                                    console.error('Error loading domain details:', error);
                                    resultsDiv.innerHTML = `<p class="error">Failed to load stats for ${selectedDomain}.</p>`;
                                });
                        });
                    })
                    .catch(error => {
                        console.error('Error loading domain list:', error);
                        domainStatsContainer.innerHTML = `<p class="error">Failed to load domain list. Please check the console.</p>`;
                    }); // End of fetch chain
            }); // End of loadDomainStatsBtn event listener

        });

        // Custom logic for the paginated Top Links section
        const topLinksContainer = document.getElementById('top-links-container');
        const loadTopLinksBtn = document.getElementById('load-top-links');

        function fetchTopLinks(page = 1) {
            topLinksContainer.innerHTML = '<p>Loading...</p>';
            fetch(`/admin/stats/top-links?page=${page}`)
                .then(response => response.ok ? response.text() : Promise.reject('Failed to load top links.'))
                .then(html => {
                    topLinksContainer.innerHTML = html;
                })
                .catch(error => {
                    console.error('Error loading top links:', error);
                    topLinksContainer.innerHTML = `<p class="error">Failed to load top links data.</p>`;
                });
        }

        loadTopLinksBtn.addEventListener('click', () => fetchTopLinks(1));

        // Use event delegation to handle clicks on pagination buttons that are loaded dynamically.
        topLinksContainer.addEventListener('click', (event) => {
            if (event.target.matches('.pagination-button')) {
                const page = event.target.dataset.page;
                fetchTopLinks(page);
            }
        });
    </script>
</body>
</html>